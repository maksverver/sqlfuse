To access the database manually, do:

  sqlcipher /path/to/db
  sqlite> PRAGMA key="YOUR-PASSWORD-HERE";
  sqlite> PRAGMA cipher_compatibility=3;  # if using SQLCipher version 4+
  sqlite> .schema
  sqlite> .dump
  etc.

WARNING: Older versions of SQLCipher would save the PRAGMA key line in the
command line history store at $HOME/.sqlite_history! This was fixed in SQLCipher
version 4.0.0.

Mounting a database in writable mode requires not just write permission on the
database file itself, but also write (and execute) permission on the directory.
The reason is that SQLite will create temporary files (such as journals) while
executing database transactions.

Performance notes:

 - Writing of large files is relatively slow (~25 MB/s), probably because the
   Linux kernel writes data in chunks of 128 kilobytes (with -o big_writes,
   which is set in main.c), and sqlite will sync to disk after every
   transaction.

   Maybe it's worth experimenting with setting "PRAGMA synchronous = off"
   (see sqlfs.c) and relying on the FUSE fsync() calls to force syncing to disk
   instead? (Initial experiments suggest this doesn't help much.)

   Another optimization: currently appending to files works by first extending
   the file with zeros to the new size, and then overwriting those with the
   actual data. Writing the new bytes directly could be up to twice as fast.

 - Currently, sqlfuse uses a 4096 byte blocksize by default (which matches the
   typical Linux pagesize). This performs well, but incurs a ~13% filesize
   overhead (i.e., a database is about 13% larger than the files it contains;
   more if the files are small).

   I should try to raise the block size to 128 kilobyte instead, to match the
   FUSE write size, which would improve space efficiency a lot, but I should
   test that it doesn't reduce write performance in practice.

   Initial experiments suggest this makes random 1-byte reads/writes *much*
   slower, presumably because much more data needs to be decrypted/encrypted.

   I tried to mitigate this by using the SQLite BLOB I/O API to access only
   the part of the block I need (see branch blobio), but this doesn't seem to
   help. Not sure why! (Reference: https://www.sqlite.org/c3ref/blob_open.html)

 - The `sqlfuse compact` command runs VACUUM which, by default, uses an
   in-memory temporary database. This means compacting large filesystems will
   likely run out of memory! An alternative solution is to use the VACUUM INTO
   command manually. For example:

     % sqlcipher old.db
     sqlite> PRAGMA KEY 'password';
     sqlite> VACUUM INTO 'new.db';
     sqlite> .quit

   And then, after verifying the new database works correctly:

     % mv new.db old.db
