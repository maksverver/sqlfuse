Next:
  - sqlfs.c: set passwords & parameters (see TODO in sqlfs_create)
  - Lookup accounting!
  - sqlfs.c: Maybe: separate functions to create/open existing database?
  - If creating the database fails, should we delete the partially-created
    database file (which will be empty)
  - Figure out which functions increase the 'lookup count' for an inode;
    document this somewhere.

Things to test:
  - open read-only file
  - use after unlink/rename of files
  - re-open existing file, verify contents are still there.
  - sqlfs tests with encryption (no setup/teardown)
  - tests should dump database state after test & check it makes sense.

TBD:
  - what should the uid/gid/mode of the root directory be?
  - should we apply the umask manually, or does the kernel handle this?
    (test it with mkdir once that works!)

Decisions to document somewhere:
  - ctime and atime are not stored. (They're not very useful.)
  - For performance reasons, the inode PRIMARY KEY in the metadata table is not
    declared as AUTOINCREMENT. Because we always set the `generation` field to a
    fixed value, that means the filesystem cannot be exported over NFS! An
    alternative solution would be to store the creation timestamp in the
    metadata table, and use that as the generation number.

General TODO:
  - create a README with some information and usage notes.
  - fully document the schema definition (wait until the implementation is
    further along; no point documenting it when it's likely to change)
  - fsck tool that checks internal consistency?
  - dump tool to dump contents of database?
  - another tool to rekey the database?
