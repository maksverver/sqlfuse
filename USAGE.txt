=== EXAMPLE USAGE ===

% sqlfuse create example.db
% mkdir mnt
% sqlfuse mount example.db mnt/
% echo 'Hello world!' > mnt/hello.txt
% fusermount -u mnt/

To view more mount options:

% sqlfuse mount -h

(Not all FUSE options are supported!)


=== ENCRYPTION ===

sqlfuse is designed to be used with encryption enabled.

For testing and scripting purposes, two additional functions are provided:

  * The -n / --no_password option allows the creation of a database file without
    encryption. These files are regular sqlite3 databases.

  * The --insecure_password option allows you to specify the password on the
    command line. THIS IS GENERALLY A BAD IDEA. Command line arguments are
    visible in process listings and may be stored in shell history files.
    Writing a password on the command line is a great way to leak it. Don't do
    this if you care about security. If you don't care about security, then
    just use the -n option to disable encryption entirely.

In summary, although these options exist, you should not normally use them.


=== FILE PERMISSIONS ===

To open a filesystem database in writable mode, you need write permission on
both the database file itself, and its parent directory.

It is not possible to mount the same database at more than one mountpoint at a
time (you will get an error message if you try), unless all instances are
mounted in readonly mode.

SQLite uses file locks to synchronize access to the database. That means it may
not be safe to mount databases over a network file system that doesn't support
POSIX file locking.


=== COMMAND REFERENCE ===

sqlfuse help

  Shows basic usage information.


sqlfuse create [options] <database>

  -n  --no_password         Create an unencrypted database without a password.
  --insecure_password=...  Password to use (INSECURE).

  Prompts for a new password, unless -n or --insecure_password is specified.


sqlfuse mount [options] <database> <mountpoint> [FUSE options]

  -n  --no_password         Mount an unencrypted database without a password.
  --insecure_password=...  Password to use (INSECURE).

  Prompts for a password, unless -n or --insecure_password is specified.

  Useful FUSE options:

    -h     To print usage information.
    -V     To print version information.
    -f     Run in the foreground.
    -d     Enable debug-mode (implies -f); more verbose logging.
    -o ro  Open database in readonly mode.


sqlfuse rekey <database>

  --old_insecure_password=...  Old password (INSECURE).
  --new_insecure_password=...  New password (INSECURE).

  Change the password on an encrypted database. (Cannot be used to enable/
  disable encryption.) Will prompt for the old and new password, unless
  --old_insecure_password and/or --new_insecure_password are specified.


sqlfuse compact [options] <database>

  -n  --no_password        Open an unencrypted database without a password.
  --insecure_password=...  Password to use (INSECURE).

  Rewrites the database file to minimize disk space used. This may reduce
  internal fragmentation as well.

  Note that rewriting the database requires a lot of temporary space (up to
  twice its original size), and since the old and new files will be entirely
  different, this affects the efficiency of incremental backups. Consequently,
  this command should be used sparingly.


sqlfuse check [options] <database>

  -n  --no_password        Open an unencrypted database without a password.
  --insecure_password=...  Password to use (INSECURE).

  Checks the consistency of the filesystem. This is a read-only operation:
  it will warn if it encounters any errors, but will not attempt to fix them.

